import { showCustomModal } from "../modals/showModal";
import { CalendarItem } from "@/app/types/types";

const currentCalendarData: CalendarItem[] = [];

// Export calendar to ICS
export function exportCalendar() {
  if (currentCalendarData.length === 0) {
    showCustomModal("Alert", "Please generate a calendar first.");
    return;
  }

  const startDateInput = document.getElementById("startDate") as HTMLInputElement | null;
  const startTimeInput = document.getElementById("startTime") as HTMLInputElement | null;
  const skipWeekendsInput = document.getElementById("skipWeekends") as HTMLInputElement | null;

  const startDateValue = startDateInput?.value;
  const startTimeValue = startTimeInput?.value;
  const skipWeekends = skipWeekendsInput?.checked ?? false;

  if (!startDateValue) {
    showCustomModal("Alert", "Please select a start date.");
    return;
  }

  if (!startTimeValue) {
    showCustomModal("Alert", "Please select a start time.");
    return;
  }

  const startDate = new Date(startDateValue);
  const [hours, minutes] = startTimeValue.split(":").map(Number);

  let icsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//AI Learning Calendar//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
X-WR-CALNAME:AI Generated Learning Calendar
X-WR-CALDESC:Personalized learning schedule generated by AI
`;

  currentCalendarData.forEach((item) => {
    const eventDate = calculateEventDate(startDate, item.day, skipWeekends);
    eventDate.setHours(hours, minutes, 0, 0);

    const endDate = new Date(eventDate);
    const duration = parseDuration(item.time);
    endDate.setHours(eventDate.getHours() + duration);

    const dateStr = formatToICS(eventDate);
    const endDateStr = formatToICS(endDate);
    const uid = `day${item.day}-${Date.now()}@ai-calendar.com`;

    const resourceLinks = item.resources?.length
      ? item.resources.map((r) => `â€¢ ${r}`).join("\\n")
      : "No specific resources provided";

    const description = `${item.description}\\n\\nTime Allocation: ${item.time}\\n\\nRecommended Resources:\\n${resourceLinks}\\n\\nDay ${item.day} of your learning journey`;

    icsContent += `
BEGIN:VEVENT
UID:${uid}
DTSTART:${dateStr}
DTEND:${endDateStr}
SUMMARY:${item.title}
DESCRIPTION:${description}
CATEGORIES:Phase ${item.phase || 1}
STATUS:CONFIRMED
TRANSP:OPAQUE
END:VEVENT`;
  });

  icsContent += "\nEND:VCALENDAR";

  downloadICSFile(icsContent);
}

// --- Helper Functions ---

function calculateEventDate(startDate: Date, dayOffset: number, skipWeekends: boolean): Date {
  const date = new Date(startDate);
  const daysToAdd = dayOffset - 1;

  if (!skipWeekends) {
    date.setDate(startDate.getDate() + daysToAdd);
    return date;
  }

  let added = 0;
  while (added < daysToAdd) {
    date.setDate(date.getDate() + 1);
    const isWeekend = date.getDay() === 0 || date.getDay() === 6;
    if (!isWeekend) added++;
  }

  return date;
}

function parseDuration(time: string): number {
  const match = time.match(/(\d+)/);
  return match ? parseInt(match[1]) : 2;
}

function formatToICS(date: Date): string {
  return date.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z";
}

function downloadICSFile(content: string): void {
  const blob = new Blob([content], { type: "text/calendar;charset=utf-8" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "ai-learning-calendar.ics";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
