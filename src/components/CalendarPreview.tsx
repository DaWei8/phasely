import { useState } from 'react'
import { useCalendarStore } from '@/lib/store/calendar-store'
import Link from 'next/link'

export default function CalendarPreview() {
  const {
    currentCalendarData,
    isEditMode,
    editIndex,
    setEditMode,
    setEditIndex,
    updateCalendarItem,
    deleteCalendarItem,
    addCalendarItem
  } = useCalendarStore()

  const [editModalOpen, setEditModalOpen] = useState(false)
  const [manualICSModalOpen, setManualICSModalOpen] = useState(false)
  const [editTitle, setEditTitle] = useState('')
  const [editDescription, setEditDescription] = useState('')
  const [manualForm, setManualForm] = useState({
    taskName: '',
    taskDescription: '',
    timeCommitment: '2',
    learningStyle: 'balanced',
    phaseNumber: 1,
    resources: [{ name: '', link: '' }, { name: '', link: '' }]
  })

  if (currentCalendarData.length === 0) {
    return null
  }

  const totalDays = currentCalendarData.length
  const totalHours = currentCalendarData.reduce((sum, item) => {
    const hours = parseFloat(item.time.match(/\d+/)?.[0] || '2')
    return sum + hours
  }, 0)
//   const phases = [...new Set(currentCalendarData.map(item => item.phase))].length
  const avgHoursPerDay = totalDays > 0 ? (totalHours / totalDays).toFixed(1) : '0'

  const phaseColors = {
    1: 'green',
    2: 'blue', 
    3: 'blue',
    4: 'yellow',
    5: 'red'
  }

  const openEditModal = (index: number) => {
    const item = currentCalendarData[index]
    setEditIndex(index)
    setEditTitle(item.title)
    setEditDescription(item.description)
    setEditModalOpen(true)
  }

  const saveEditModal = () => {
    if (editIndex !== null && editTitle.trim() && editDescription.trim()) {
      updateCalendarItem(editIndex, {
        title: editTitle.trim(),
        description: editDescription.trim()
      })
      setEditModalOpen(false)
      setEditIndex(null)
    }
  }

  const exportCalendar = () => {
    const startDateInput = document.getElementById('startDate') as HTMLInputElement
    const startTimeInput = document.getElementById('startTime') as HTMLInputElement
    const skipWeekendsInput = document.getElementById('skipWeekends') as HTMLInputElement

    if (!startDateInput?.value) {
      alert('Please select a start date.')
      return
    }

    const startDate = new Date(startDateInput.value)
    const [hours, minutes] = (startTimeInput?.value || '09:00').split(':').map(Number)
    const skipWeekends = skipWeekendsInput?.checked || false

    let icsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//AI Learning Calendar//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
X-WR-CALNAME:AI Generated Learning Calendar
X-WR-CALDESC:Personalized learning schedule generated by AI
`

    currentCalendarData.forEach((item) => {
      const eventDate = new Date(startDate)
      const daysToAdd = item.day - 1

      if (skipWeekends) {
        let businessDaysAdded = 0
        while (businessDaysAdded < daysToAdd) {
          eventDate.setDate(eventDate.getDate() + 1)
          if (eventDate.getDay() !== 0 && eventDate.getDay() !== 6) {
            businessDaysAdded++
          }
        }
      } else {
        eventDate.setDate(startDate.getDate() + daysToAdd)
      }

      eventDate.setHours(hours, minutes, 0, 0)
      const endDate = new Date(eventDate)
      const duration = parseInt(item.time.match(/\d+/)?.[0] || '2')
      endDate.setHours(eventDate.getHours() + duration)

      const dateStr = eventDate.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
      const endDateStr = endDate.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
      const uid = `day${item.day}-${Date.now()}-${item.day}@ai-calendar.com`

      const resourceLinks = item.resources?.length 
        ? item.resources.map(resource => `â€¢ ${resource}`).join('\\n')
        : 'No specific resources provided'
      
      const description = `${item.description}\\n\\nTime Allocation: ${item.time}\\n\\nRecommended Resources:\\n${resourceLinks}\\n\\nDay ${item.day} of your learning journey`

      icsContent += `
BEGIN:VEVENT
UID:${uid}
DTSTART:${dateStr}
DTEND:${endDateStr}
SUMMARY:${item.title}
DESCRIPTION:${description}
CATEGORIES:Phase ${item.phase || 1}
STATUS:CONFIRMED
TRANSP:OPAQUE
END:VEVENT`
    })

    icsContent += '\nEND:VCALENDAR'

    const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' })
    const link = document.createElement('a')
    link.href = URL.createObjectURL(blob)
    link.download = 'ai-learning-calendar.ics'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  const addManualResource = () => {
    if (manualForm.resources.length < 5) {
      setManualForm(prev => ({
        ...prev,
        resources: [...prev.resources, { name: '', link: '' }]
      }))
    }
  }

  const removeManualResource = (index: number) => {
    if (manualForm.resources.length > 2) {
      setManualForm(prev => ({
        ...prev,
        resources: prev.resources.filter((_, i) => i !== index)
      }))
    }
  }

  const saveManualICS = () => {
    const { taskName, taskDescription, timeCommitment, phaseNumber, resources } = manualForm
    
    if (!taskName.trim() || !taskDescription.trim()) {
      alert('Please fill in all required fields.')
      return
    }

    const validResources = resources.filter(r => 
      r.name.trim() && r.link.trim() && /^https?:\/\/.+\..+/.test(r.link.trim())
    )

    if (validResources.length < 2) {
      alert('Please provide at least 2 valid resources (name and link).')
      return
    }

    addCalendarItem({
      day: currentCalendarData.length + 1,
      phase: phaseNumber,
      title: taskName.trim(),
      description: taskDescription.trim(),
      time: `${timeCommitment} hours/day`,
      resources: validResources.map(r => r)
    })

    setManualICSModalOpen(false)
    setManualForm({
      taskName: '',
      taskDescription: '',
      timeCommitment: '2',
      learningStyle: 'balanced',
      phaseNumber: 1,
      resources: [{ name: '', link: '' }, { name: '', link: '' }]
    })
  }

  return (
    <div className="bg-white rounded-lg shadow-lg p-4">
      <div className="flex justify-between w-full items-center gap-y-2 flex-wrap mb-6">
        <h2 className="text-lg lg:text-xl font-semibold flex items-center">
          <i className="fas fa-calendar-check text-green-600 mr-2"></i>
          Calendar Preview & Editor
        </h2>
        <div className="md:flex space-x-2 w-full md:w-96 hidden">
          <button
            onClick={() => setManualICSModalOpen(true)}
            className="text-blue-700 px-5 border border-blue-700 py-3 h-12 rounded-md font-medium transition-colors hover:bg-blue-50"
          >
            <i className="fas fa-plus"></i>
          </button>
          <button
            onClick={() => setEditMode(!isEditMode)}
            className="bg-blue-100 w-full h-fit hover:bg-blue-700 text-blue-600 hover:text-white px-2 md:px-4 py-3 rounded-md font-medium transition-colors"
          >
            <i className="fas fa-edit mr-2"></i>
            {isEditMode ? 'Done' : 'Edit'}
          </button>
          <button
            onClick={exportCalendar}
            className="bg-gradient-to-r from-blue-600 to-blue-600 w-full h-fit hover:from-blue-700 hover:to-blue-700 text-white px-2 md:px-4 py-3 rounded-md transition-colors"
          >
            <i className="fas fa-download mr-2"></i>Export ICS
          </button>
        </div>
      </div>

      {/* Calendar Stats */}
      <div className="grid md:grid-cols-4 w-full gap-4 mb-6">
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-blue-600">{totalDays}</div>
          <div className="text-sm text-gray-600">Total Days</div>
        </div>
        <div className="bg-green-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-green-600">{totalHours}</div>
          <div className="text-sm text-gray-600">Total Hours</div>
        </div>
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-blue-600">{currentCalendarData.reduce((sum, item) => sum + (item.resources?.length || 0), 0)}</div>
          <div className="text-sm text-gray-600">Resources</div>
        </div>
        <div className="bg-yellow-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-orange-600">{avgHoursPerDay}</div>
          <div className="text-sm text-gray-600">Avg Hours/Day</div>
        </div>
      </div>

      {/* Calendar Items */}
      <div className="space-y-4 lg:max-h-96 overflow-y-auto">
        {currentCalendarData.slice(0, 20).map((item, index) => {
          const phaseColor = phaseColors[item.phase as keyof typeof phaseColors] || 'gray'
          return (
            <div
              key={`${item.day}-${index}`}
              className={`rounded-lg border-l-4 border-${phaseColor}-500 bg-white p-4 shadow-sm transition-all hover:shadow-md ${
                isEditMode ? 'border-2 border-dashed border-blue-300' : ''
              }`}
            >
              <div className="flex justify-between items-start mb-2">
                <h3 className="font-semibold text-gray-900">
                  Day {item.day}: {item.title}
                </h3>
                <div className="flex items-center space-x-2">
                  <span className="text-sm hidden md:flex text-gray-500">{item.time}</span>
                  {isEditMode && (
                    <>
                      <button
                        onClick={() => openEditModal(index)}
                        className="text-blue-600 hover:text-blue-800"
                      >
                        <i className="fas fa-edit"></i>
                      </button>
                      <button
                        onClick={() => {
                          if (confirm('Are you sure you want to delete this item?')) {
                            deleteCalendarItem(index)
                          }
                        }}
                        className="text-red-600 hover:text-red-800"
                      >
                        <i className="fas fa-trash-alt"></i>
                      </button>
                    </>
                  )}
                </div>
              </div>
              <p className="text-gray-700 text-sm mb-2">
                {item.description}
              </p>
              <div className="flex flex-wrap gap-2">
                {item.resources?.map((resource, resIndex) => (
                  <Link
                    key={resIndex}
                    href={resource.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full hover:bg-blue-200 transition-colors"
                  >
                    <i className="fas fa-external-link-alt mr-1"></i>Resource
                  </Link>
                ))}
                <span className="text-sm lg:hidden text-gray-500">{item.time}</span>
              </div>
            </div>
          )
        })}
      </div>

      {currentCalendarData.length > 20 && (
        <div className="text-center py-4 text-gray-500">
          <i className="fas fa-ellipsis-h"></i> {currentCalendarData.length - 20} more days will be included in your calendar
        </div>
      )}

      {/* Mobile buttons */}
      <div className="md:hidden space-x-2 w-full flex mt-4">
        <button
          onClick={() => setManualICSModalOpen(true)}
          className="text-blue-700 px-5 border border-blue-700 py-3 h-12 rounded-md font-medium transition-colors"
        >
          <i className="fas fa-plus"></i>
        </button>
        <button
          onClick={() => setEditMode(!isEditMode)}
          className="bg-blue-100 w-full h-full hover:bg-blue-700 text-blue-600 hover:text-white px-2 md:px-4 py-3 rounded-md font-medium transition-colors"
        >
          <i className="fas fa-edit mr-2"></i>
          {isEditMode ? 'Done' : 'Edit'}
        </button>
        <button
          onClick={exportCalendar}
          className="bg-gradient-to-r from-blue-600 to-blue-600 w-full h-fit hover:from-blue-700 hover:to-blue-700 text-white px-2 md:px-4 py-3 rounded-md transition-colors"
        >
          <i className="fas fa-download mr-2"></i>Export
        </button>
      </div>

      {/* Edit Modal */}
      {editModalOpen && (
        <div className="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-96 max-w-full mx-4">
            <h3 className="text-lg font-semibold mb-4">Edit Calendar Item</h3>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Title
            </label>
            <input
              type="text"
              value={editTitle}
              onChange={(e) => setEditTitle(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            />
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Description
            </label>
            <textarea
              rows={4}
              value={editDescription}
              onChange={(e) => setEditDescription(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            ></textarea>
            <div className="flex justify-end space-x-4">
              <button
                onClick={() => {
                  setEditModalOpen(false)
                  setEditIndex(null)
                }}
                className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md"
              >
                Cancel
              </button>
              <button
                onClick={saveEditModal}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Manual ICS Event Modal */}
      {manualICSModalOpen && (
        <div className="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-lg mx-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-lg font-semibold mb-4">Add New ICS Event</h3>
            
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Task Name
            </label>
            <input
              type="text"
              value={manualForm.taskName}
              onChange={(e) => setManualForm(prev => ({ ...prev, taskName: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
              placeholder="Main task name"
            />

            <label className="block text-sm font-medium text-gray-700 mb-2">
              Task Description
            </label>
            <textarea
              rows={3}
              value={manualForm.taskDescription}
              onChange={(e) => setManualForm(prev => ({ ...prev, taskDescription: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
              placeholder="Detailed description"
            ></textarea>

            <label className="block text-sm font-medium text-gray-700 mb-2">
              Time Commitment
            </label>
            <select
              value={manualForm.timeCommitment}
              onChange={(e) => setManualForm(prev => ({ ...prev, timeCommitment: e.target.value }))}
              className="w-full px-3 py-3 border border-gray-300 mb-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="1">1 hour/day</option>
              <option value="2">2 hours/day</option>
              <option value="3">3 hours/day</option>
              <option value="4">4 hours/day</option>
              <option value="5">5 hours/day</option>
              <option value="6">6+ hours/day</option>
            </select>

            <label className="block text-sm font-medium text-gray-700 mb-2">
              Learning Style
            </label>
            <select
              value={manualForm.learningStyle}
              onChange={(e) => setManualForm(prev => ({ ...prev, learningStyle: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            >
              <option value="balanced">Balanced (Theory + Practice)</option>
              <option value="hands-on">Hands-on (Project-based)</option>
              <option value="theoretical">Theoretical (Concept-focused)</option>
            </select>

            <label className="block text-sm font-medium text-gray-700 mb-2">
              Phase Number
            </label>
            <input
              type="number"
              min="1"
              max="7"
              value={manualForm.phaseNumber}
              onChange={(e) => setManualForm(prev => ({ ...prev, phaseNumber: parseInt(e.target.value) || 1 }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            />

            <label className="block text-sm font-medium text-gray-700 mb-2">
              Resources (2 to 5)
            </label>
            <div className="space-y-2 mb-4">
              {manualForm.resources.map((resource, index) => (
                <div key={index} className="flex items-center space-x-2">
                  <input
                    type="text"
                    placeholder="Resource Name"
                    value={resource.name}
                    onChange={(e) => {
                      const newResources = [...manualForm.resources]
                      newResources[index].name = e.target.value
                      setManualForm(prev => ({ ...prev, resources: newResources }))
                    }}
                    className="w-1/3 px-2 py-1 border border-gray-300 rounded"
                  />
                  <input
                    type="url"
                    placeholder="https://link.com"
                    value={resource.link}
                    onChange={(e) => {
                      const newResources = [...manualForm.resources]
                      newResources[index].link = e.target.value
                      setManualForm(prev => ({ ...prev, resources: newResources }))
                    }}
                    className="w-2/3 px-2 py-1 border border-gray-300 rounded"
                  />
                  <button
                    type="button"
                    onClick={() => removeManualResource(index)}
                    className="text-red-600 hover:text-red-800"
                    disabled={manualForm.resources.length <= 2}
                  >
                    <i className="fas fa-times"></i>
                  </button>
                </div>
              ))}
            </div>

            <button
              type="button"
              onClick={addManualResource}
              className="text-blue-600 hover:underline text-sm mb-4"
              disabled={manualForm.resources.length >= 5}
            >
              + Add Resource
            </button>

            <div className="flex justify-end space-x-4 mt-4">
              <button
                onClick={() => setManualICSModalOpen(false)}
                className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md"
              >
                Cancel
              </button>
              <button
                onClick={saveManualICS}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
              >
                Add Event
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}